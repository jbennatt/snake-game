package snake_game;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import high_score_server.HighScoreServer;
import high_score_server.HighScoreUpdate;

public class HighScoreFrame extends JFrame {

	/**
	 * generated by eclipse
	 */
	private static final long serialVersionUID = -8458563695290133153L;

	private final JPanel panel = new JPanel();

	private int rank = 0;

	private final JLabel nameHeader = new JLabel("Name");
	private final JLabel scoreHeder = new JLabel("Score");
	private final JLabel timeHeader = new JLabel("Time (s)");

	private final JLabel[] nameLabels = new JLabel[HighScoreUpdate.NUM_SCORES];
	private final JLabel[] scoreLabels = new JLabel[HighScoreUpdate.NUM_SCORES];
	private final JLabel[] timeLabels = new JLabel[HighScoreUpdate.NUM_SCORES];

	public HighScoreFrame() {
		super("High Scores");

		panel.setLayout(new GridBagLayout());
		setupPanel();
		this.setContentPane(panel);
	}

	private void setupPanel() {
		final GridBagConstraints gbc = new GridBagConstraints();

		gbc.gridx = gbc.gridy = 0;
		gbc.weightx = 1; // makes it use all of the horizontal space
		gbc.weighty = 0;
		gbc.fill = GridBagConstraints.NONE;

		// add headers
		gbc.anchor = GridBagConstraints.WEST;
		panel.add(nameHeader, gbc);

		gbc.gridx++;
		gbc.anchor = GridBagConstraints.EAST;
		panel.add(scoreHeder, gbc);

		gbc.gridx++;
		panel.add(timeHeader, gbc);

		gbc.gridy++;
		for (int i = 0; i < nameLabels.length; ++i) {
			final JLabel nameLabel = nameLabels[i] = new JLabel((i + 1) + ". ");
			final JLabel scoreLabel = scoreLabels[i] = new JLabel();
			final JLabel timeLabel = timeLabels[i] = new JLabel();

			gbc.gridx = 0;

			gbc.anchor = GridBagConstraints.WEST;
			panel.add(nameLabel, gbc);

			gbc.gridx++;
			gbc.anchor = GridBagConstraints.EAST;
			panel.add(scoreLabel, gbc);

			gbc.gridx++;
			panel.add(timeLabel, gbc);

			gbc.gridy++;
		}
	}

	private void reset() {
		rank = 0;
	}

	private void addScore(final String name, final int score, final double time) {
		nameLabels[rank].setText((rank + 1) + ". " + name);
		scoreLabels[rank].setText("" + score);
		timeLabels[rank].setText("" + time);
		++rank;
	}

	public void updateHighScores() {
		try {
			System.out.println("Trying to update high scores");
			final Socket client = new Socket(HighScoreServer.SERVER_IP, HighScoreServer.PORT);
			final DataOutputStream dos = new DataOutputStream(client.getOutputStream());
			final DataInputStream dis = new DataInputStream(client.getInputStream());

			System.out.println("HighScoreFrame: sent HIGH_SCORE_QUERY");
			dos.writeInt(HighScoreServer.HIGH_SCORE_QUERY);

			reset();
			System.out.println("reset frame");

			final int n = dis.readInt();

			System.out.println("read " + n + " scores");
			for (int i = 0; i < n; ++i) {
				System.out.println(i + 1);
				final String name = HighScoreServer.readString(dis);
				System.out.println('\t' + name);
				final int score = dis.readInt();
				System.out.println('\t' + score);
				final double time = dis.readDouble();
				System.out.println('\t' + time);
				addScore(name, score, time);
			}
			client.close();
			System.out.println("closed client");
		} catch (IOException e) {
			System.out.println("There was an exception: " + e.getLocalizedMessage());
			// TODO Auto-generated catch block
			// e.printStackTrace();
		}
	}
}
